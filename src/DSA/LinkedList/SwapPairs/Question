LL: Swap Nodes in Pairs ( **Interview Question)
LeetCode #24

Write a method swapPairs() inside a LinkedList class that swaps every two adjacent nodes in a singly linked list.

This method should update the linked list in-place by changing the next pointers â€” not by swapping values.

The Linked List does not have tail or length attributes (you will not need them).

The method should work correctly for:

empty lists,

single-node lists,

even-length lists,

odd-length lists.



Hints:

Pseudocode Outline

Create a dummy node that points to the head

Use previous to track the node before the pair

Use first to track the first node in the pair

While there is a pair to swap:

Let second = first.next

Update pointers to swap the two nodes

Move previous and first forward

Reassign the head to dummy.next





ðŸ’¡ Hints

A dummy node is helpful when the head might change.

Always update all next pointers in the correct order.

Check both first and first.next in the loop condition.

Don't forget to reconnect the swapped nodes to the rest of the list.





ðŸ“Š Step-by-Step Example (Visual Walkthrough)

Input List: 1 -> 2 -> 3 -> 4

Initialize:

dummy â†’ [0 â†’ 1]

previous = dummy

first = 1

Swap 1 and 2:

previous.next â†’ 2

first.next â†’ 3

second.next â†’ 1
Result so far: 0 â†’ 2 â†’ 1 â†’ 3 â†’ 4

Move pointers:

previous = 1

first = 3

Swap 3 and 4:

previous.next â†’ 4

first.next â†’ null

second.next â†’ 3
Final result: 0 â†’ 2 â†’ 1 â†’ 4 â†’ 3

Set head equal to  dummy.next
LC-92

In the LinkedList class, implement a method called reverseBetween that reverses the nodes of the list between indexes startIndex and endIndex (inclusive).

It's important to note that you should only rearrange the nodes themselves, not just their values.

Note:  The Linked List does NOT have a tail which will make the implementation easier.

Assumption: You can assume that startIndex and endIndex are not out of bounds.

The method should have the following signature:



public void reverseBetween(int m, int n) {
    // Your implementation here
}


The method should not return any value, and it should modify the original linked list.

The positions startIndex and endIndex are 0-indexed.



Example:

Given the following linked list:



1 -> 2 -> 3 -> 4 -> 5



Calling reverseBetween(1, 3) should result in the following modified linked list:



1 -> 4 -> 3 -> 2 -> 5



I highly recommend that you draw the Linked List out on a piece of paper so you can visualize the steps.

Notes:

The method should not duplicate any of the existing nodes, only rearranging the existing nodes in the list.

However, the creation of a limited number of new nodes is allowed (e.g., dummy nodes to facilitate the partitioning process).

The method should not use any extra data structures such as arrays or lists.





Hints:

Pseudo Code:

Check if the head of the list is null.

If the list is empty, there is nothing to reverse. Return immediately (do nothing).

Create a dummyNode with value 0.

This node serves as a placeholder to simplify operations involving the list head.

Set the next pointer of dummyNode to point to the head of the list.

Initialize a variable previousNode and set it to dummyNode.

previousNode will track the node right before the segment we want to reverse.

Move previousNode forward startIndex steps to position it just before the start of the segment to reverse.

Use a loop with an index i going from 0 to startIndex.

Set a currentNode variable to point to the next node after previousNode.

currentNode will be the first node of the segment to be reversed.

Now we're ready to reverse the segment.

Perform the following steps endIndex - startIndex times:

Set a nodeToMove variable to point to the next node after currentNode. This is the node we will "cut" from the segment and "paste" to the front of the segment.

Update currentNode.next to skip over nodeToMove and point to the node right after nodeToMove.

Set the next pointer of nodeToMove to point to the node at the front of the segment. This is the node that previousNode.next is pointing to.

Update previousNode.next to point to nodeToMove. nodeToMove has now been moved to the front of the segment.

After the loop, the segment between startIndex and endIndex is reversed.

Update the head of the list to point to the actual first node (not dummyNode).

Set head to point to dummyNode.next.



Example in plain English:

Imagine you have a deck of cards numbered from 1 to 10 in order. Now, I want you to reverse the cards between positions 3 and 7.

Here's how you can do it:

Find the 3rd Card: Locate the card at the 3rd position. Let's call this card the "previousNode card" and place it on the table.

Identify the Starting Card: Look at the next card in line. Name this the "currentNode card." This card marks the beginning of the section to reverse.

Prepare for the Magic Trick: Get ready to perform a magic trick on the next set of cards.

Select Next Card: Focus on the "currentNode card." Pick up the card immediately after it, and call it the "nodeToMove card."

Rearrange Cards: Move the "currentNode card" so that it sits behind the "nodeToMove card."

Place the Card: Lay the "nodeToMove card" down on the table next to the "previousNode card." Now, the "nodeToMove card" has moved to the front.

Repeat the Process: Continue this process until you reach the card at the 7th position. By the end, the cards between the 3rd and 7th positions should be in reverse order.



In programming terms, this process is similar to what the reverseBetween function does with a linked list.

A linked list is like a chain where each link only knows about the next link but not the previous one.

We have to keep track of the "previousNode," "currentNode," and "nodeToMove" nodes to make sure we don't lose any nodes while reversing them.

When you finish, the section between the 3rd and 7th nodes in the linked list will be reversed, just like the cards.

